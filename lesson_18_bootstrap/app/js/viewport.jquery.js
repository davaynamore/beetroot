"use strict";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

(function ($) {
  /** @return boolean */
  function _hasScroll(element) {
    return element ? element.offsetHeight < element.scrollHeight || element.offsetWidth < element.scrollWidth : false;
  }
  /** @return HTMLElement */


  function getScrollableParent(element) {
    if (!element) {
      return window.document.body;
    }

    while (element.tagName !== 'BODY' && !_hasScroll(element)) {
      element = element.parentElement;
    }

    return element;
  }
  /** @return {top, bottom, left, right, width, height, viewportWidth, viewportHeight} */


  function getRelativePosition(element, viewport) {
    var vpRect = viewport ? viewport.tagName === 'BODY' ? {
      top: 0,
      left: 0,
      width: window.innerWidth,
      right: window.innerWidth,
      height: window.innerHeight,
      bottom: window.innerHeight
    } : viewport.getBoundingClientRect() : {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      width: 0,
      height: 0
    },
        elRect = element ? element.getBoundingClientRect() : {
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      width: 0,
      height: 0
    };
    return {
      viewport: viewport,
      viewportWidth: vpRect.width,
      viewportHeight: vpRect.height,
      element: element,
      elementWidth: elRect.width,
      elementHeight: elRect.height,
      top: elRect.top - vpRect.top,
      bottom: vpRect.bottom - elRect.bottom,
      left: elRect.left - vpRect.left,
      right: vpRect.right - elRect.right
    };
  }
  /** @return boolean */


  function _inViewport(element) {
    var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var viewport = arguments.length > 2 ? arguments[2] : undefined;
    var pos = getRelativePosition(element, viewport);
    return pos.top - threshold >= 0 && pos.bottom - threshold >= 0 && pos.left - threshold >= 0 && pos.right - threshold >= 0;
  }
  /** @return {inViewport, vertical, horizontal, top, bottom, left, right, width, height, viewportWidth, viewportHeight}  */


  function _getState(element) {
    var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var allowPartly = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    var viewport = arguments.length > 3 ? arguments[3] : undefined;
    var pos = getRelativePosition(element, viewport);
    pos.inViewport = pos.top - threshold >= 0 && pos.bottom - threshold >= 0 && pos.left - threshold >= 0 && pos.right - threshold >= 0;

    if (pos.top - threshold >= 0 && pos.bottom - threshold >= 0) {
      pos.vertical = 'inside';
    } else if (pos.top - threshold <= 0 && pos.bottom - threshold <= 0) {
      pos.vertical = 'exceeds';
    } else if (allowPartly) {
      pos.vertical = pos.top - threshold <= 0 ? pos.bottom - threshold - pos.viewportHeight > pos.elementHeight ? 'above' : 'partly-above' : pos.top - threshold - pos.viewportHeight > pos.elementHeight ? 'below' : 'partly-below';
    } else {
      pos.vertical = pos.top - threshold <= 0 ? 'above' : 'below';
    }

    if (pos.left - threshold >= 0 && pos.right - threshold >= 0) {
      pos.horizontal = 'inside';
    } else if (pos.left - threshold <= 0 && pos.right - threshold <= 0) {
      pos.horizontal = 'exceeds';
    } else if (allowPartly) {
      pos.horizontal = pos.left - threshold <= 0 ? pos.right - threshold - pos.viewportWidth > pos.elementWidth ? 'left' : 'partly-left' : pos.left - threshold - pos.viewportWidth > pos.elementWidth ? 'right' : 'partly-right';
    } else {
      pos.horizontal = pos.top - threshold <= 0 ? 'left' : 'right';
    }

    return pos;
  }

  var viewportFunctions = {
    /** @return boolean */
    hasScroll: function hasScroll() {
      if (!this.length) {
        return false;
      }

      return _hasScroll(this[0]);
    },

    /** @return HTMLElement */
    scrollableParent: function scrollableParent() {
      return getScrollableParent(this[0]);
    },

    /** @return {top, bottom, left, right, width, height, viewportWidth, viewportHeight} */
    relativePosition: function relativePosition() {
      var viewport = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.scrollableParent();
      return getRelativePosition(this[0], viewport ? viewport instanceof $ ? viewport[0] : viewport : this.scrollableParent());
    },

    /** @return boolean */
    inViewport: function inViewport() {
      var threshold = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var viewport = arguments.length > 1 ? arguments[1] : undefined;

      if (!this.length) {
        return false;
      }

      return _inViewport(this[0], threshold, viewport || this.scrollableParent());
    },

    /** @return {inViewport, vertical, horizontal, top, bottom, left, right, width, height, viewportWidth, viewportHeight}  */
    getState: function getState() {
      var threshold = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var allowPartly = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var viewport = arguments.length > 2 ? arguments[2] : undefined;
      viewport = viewport || this.scrollableParent();

      if (!this.length) {
        return {
          inViewport: false,
          vertical: 'inside',
          horizontal: 'inside',
          top: 0,
          bottom: 0,
          left: 0,
          right: 0,
          width: 0,
          height: 0,
          viewportWidth: 0,
          viewportHeight: 0
        };
      }

      return _getState(this[0], threshold, allowPartly, viewport);
    }
  };

  $.fn.viewport = function () {
    return _objectSpread({}, this, viewportFunctions);
  };

  $.extend($.expr[':'], {
    hasScroll: function hasScroll(element) {
      return _hasScroll(element);
    },
    hasScrollVertical: function hasScrollVertical(element) {
      return element.offsetHeight < element.scrollHeight;
    },
    hasScrollHorizontal: function hasScrollHorizontal(element) {
      return element.offsetWidth < element.scrollWidth;
    },
    inViewport: function inViewport(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined;
      return _inViewport(element, threshold, viewport || getScrollableParent(element));
    },
    aboveTheViewport: function aboveTheViewport(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined,
          pos = getRelativePosition(element, viewport || getScrollableParent(element));
      return pos.top - threshold <= 0 && pos.bottom >= 0;
    },
    belowTheViewport: function belowTheViewport(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined,
          pos = getRelativePosition(element, viewport || getScrollableParent(element));
      return pos.bottom - threshold <= 0 && pos.top >= 0;
    },
    leftOfViewport: function leftOfViewport(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined,
          pos = getRelativePosition(element, viewport || getScrollableParent(element));
      return pos.left - threshold <= 0 && pos.right >= 0;
    },
    rightOfViewport: function rightOfViewport(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined,
          pos = getRelativePosition(element, viewport || getScrollableParent(element));
      return pos.right - threshold <= 0 && pos.left >= 0;
    },
    aboveTheViewportPartly: function aboveTheViewportPartly(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined,
          pos = getRelativePosition(element, viewport || getScrollableParent(element));
      return pos.top - threshold <= 0 && pos.bottom >= 0 && pos.bottom - threshold - pos.viewportHeight > pos.elementHeight;
    },
    belowTheViewportPartly: function belowTheViewportPartly(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined,
          pos = getRelativePosition(element, viewport || getScrollableParent(element));
      return pos.bottom - threshold <= 0 && pos.top >= 0 && pos.top - threshold - pos.viewportHeight > pos.elementHeight;
    },
    leftOfViewportPartly: function leftOfViewportPartly(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined,
          pos = getRelativePosition(element, viewport || getScrollableParent(element));
      return pos.left - threshold <= 0 && pos.right >= 0 && pos.left - threshold - pos.viewportWidth > pos.elementWidth;
    },
    rightOfViewportPartly: function rightOfViewportPartly(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined,
          pos = getRelativePosition(element, viewport || getScrollableParent(element));
      return pos.right - threshold <= 0 && pos.left >= 0 && pos.right - threshold - pos.viewportWidth > pos.elementWidth;
    },
    exceedsViewport: function exceedsViewport(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined;
      return !_inViewport(element, threshold, viewport || getScrollableParent(element));
    },
    exceedsViewportVertical: function exceedsViewportVertical(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined,
          pos = getRelativePosition(element, viewport || getScrollableParent(element));
      return pos.top - threshold < 0 && pos.bottom - threshold < 0;
    },
    exceedsViewportHorizontal: function exceedsViewportHorizontal(element, i, meta) {
      var param = (meta[3] || '').split(','),
          threshold = param[0] && (param[0] = param[0].trim()) ? parseInt(param[0], 10) : 0,
          viewport = param[1] && (param[1] = param[1].trim()) ? $(param[1])[0] || undefined : undefined,
          pos = getRelativePosition(element, viewport || getScrollableParent(element));
      return pos.left - threshold < 0 && pos.right - threshold < 0;
    }
  });
})(jQuery);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZpZXdwb3J0LmpxdWVyeS5qcyJdLCJuYW1lcyI6WyIkIiwiaGFzU2Nyb2xsIiwiZWxlbWVudCIsIm9mZnNldEhlaWdodCIsInNjcm9sbEhlaWdodCIsIm9mZnNldFdpZHRoIiwic2Nyb2xsV2lkdGgiLCJnZXRTY3JvbGxhYmxlUGFyZW50Iiwid2luZG93IiwiZG9jdW1lbnQiLCJib2R5IiwidGFnTmFtZSIsInBhcmVudEVsZW1lbnQiLCJnZXRSZWxhdGl2ZVBvc2l0aW9uIiwidmlld3BvcnQiLCJ2cFJlY3QiLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJpbm5lcldpZHRoIiwicmlnaHQiLCJoZWlnaHQiLCJpbm5lckhlaWdodCIsImJvdHRvbSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsImVsUmVjdCIsInZpZXdwb3J0V2lkdGgiLCJ2aWV3cG9ydEhlaWdodCIsImVsZW1lbnRXaWR0aCIsImVsZW1lbnRIZWlnaHQiLCJpblZpZXdwb3J0IiwidGhyZXNob2xkIiwicG9zIiwiZ2V0U3RhdGUiLCJhbGxvd1BhcnRseSIsInZlcnRpY2FsIiwiaG9yaXpvbnRhbCIsInZpZXdwb3J0RnVuY3Rpb25zIiwibGVuZ3RoIiwic2Nyb2xsYWJsZVBhcmVudCIsInJlbGF0aXZlUG9zaXRpb24iLCJmbiIsImV4dGVuZCIsImV4cHIiLCJoYXNTY3JvbGxWZXJ0aWNhbCIsImhhc1Njcm9sbEhvcml6b250YWwiLCJpIiwibWV0YSIsInBhcmFtIiwic3BsaXQiLCJ0cmltIiwicGFyc2VJbnQiLCJ1bmRlZmluZWQiLCJhYm92ZVRoZVZpZXdwb3J0IiwiYmVsb3dUaGVWaWV3cG9ydCIsImxlZnRPZlZpZXdwb3J0IiwicmlnaHRPZlZpZXdwb3J0IiwiYWJvdmVUaGVWaWV3cG9ydFBhcnRseSIsImJlbG93VGhlVmlld3BvcnRQYXJ0bHkiLCJsZWZ0T2ZWaWV3cG9ydFBhcnRseSIsInJpZ2h0T2ZWaWV3cG9ydFBhcnRseSIsImV4Y2VlZHNWaWV3cG9ydCIsImV4Y2VlZHNWaWV3cG9ydFZl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ckQsR0FBc0UsQ0FEdEY7QUFBQSxVQUVJbEMsUUFBUSxHQUFLa0MsS0FBSyxDQUFDLENBQUQsQ0FBTCxLQUFhQSxLQUFLLENBQUMsQ0FBRCxDQUFMLEdBQVdBLEtBQUssQ0FBQyxDQUFELENBQUwsQ0FBU0UsSUFBVCxFQUF4QixDQUFELEdBQThDbEQsQ0FBQyxDQUFDZ0QsS0FBSyxDQUFDLENBQUQsQ0FBTixDQUFELENBQVksQ0FBWixLQUFrQkksU0FBaEUsR0FBNkVBLFNBRjdGO0FBQUEsVUFHSXBCLEdBQUcsR0FBU25CLG1CQUFtQixDQUFDWCxPQUFELEVBQVVZLFFBQVEsSUFBSVAsbUJBQW1CLENBQUNMLE9BQUQsQ0FBekMsQ0FIbkM7QUFLQSxhQUFPOEIsR0FBRyxDQUFDZixJQUFKLEdBQVdjLFNBQVgsR0FBdUIsQ0FBdkIsSUFBNEJDLEdBQUcsQ0FBQ1osS0FBSixHQUFZVyxTQUFaLEdBQXdCLENBQTNEO0FBQ0g7QUF2R2lCLEdBQXRCO0FBeUdILENBeE9ELEVBd09HaUMsTUF4T0giLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCQpIHtcclxuICAgIC8qKiBAcmV0dXJuIGJvb2xlYW4gKi9cclxuICAgIGZ1bmN0aW9uIGhhc1Njcm9sbChlbGVtZW50KSB7XHJcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQgPyBlbGVtZW50Lm9mZnNldEhlaWdodCA8IGVsZW1lbnQuc2Nyb2xsSGVpZ2h0IHx8IGVsZW1lbnQub2Zmc2V0V2lkdGggPCBlbGVtZW50LnNjcm9sbFdpZHRoIDogZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEByZXR1cm4gSFRNTEVsZW1lbnQgKi9cclxuICAgIGZ1bmN0aW9uIGdldFNjcm9sbGFibGVQYXJlbnQoZWxlbWVudCkge1xyXG4gICAgICAgIGlmICghZWxlbWVudCkgeyByZXR1cm4gd2luZG93LmRvY3VtZW50LmJvZHk7IH1cclxuXHJcbiAgICAgICAgd2hpbGUgKGVsZW1lbnQudGFnTmFtZSAhPT0gJ0JPRFknICYmICFoYXNTY3JvbGwoZWxlbWVudCkpIHtcclxuICAgICAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAcmV0dXJuIHt0b3AsIGJvdHRvbSwgbGVmdCwgcmlnaHQsIHdpZHRoLCBoZWlnaHQsIHZpZXdwb3J0V2lkdGgsIHZpZXdwb3J0SGVpZ2h0fSAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0UmVsYXRpdmVQb3NpdGlvbihlbGVtZW50LCB2aWV3cG9ydCkge1xyXG4gICAgICAgIGxldCB2cFJlY3QgPSB2aWV3cG9ydFxyXG4gICAgICAgICAgICAgICAgICAgICA/ICh2aWV3cG9ydC50YWdOYW1lID09PSAnQk9EWScgPyB7dG9wOiAwLCBsZWZ0OiAwLCB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsIHJpZ2h0OiB3aW5kb3cuaW5uZXJXaWR0aCwgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQsIGJvdHRvbTogd2luZG93LmlubmVySGVpZ2h0fSA6IHZpZXdwb3J0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKVxyXG4gICAgICAgICAgICAgICAgICAgICA6IHt0b3A6IDAsIGJvdHRvbTogMCwgbGVmdDogMCwgcmlnaHQ6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDB9LFxyXG4gICAgICAgICAgICBlbFJlY3QgPSBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgID8gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAgICAgICAgICAgICAgICA6IHt0b3A6IDAsIGJvdHRvbTogMCwgbGVmdDogMCwgcmlnaHQ6IDAsIHdpZHRoOiAwLCBoZWlnaHQ6IDB9O1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2aWV3cG9ydCxcclxuICAgICAgICAgICAgdmlld3BvcnRXaWR0aDogIHZwUmVjdC53aWR0aCxcclxuICAgICAgICAgICAgdmlld3BvcnRIZWlnaHQ6IHZwUmVjdC5oZWlnaHQsXHJcblxyXG4gICAgICAgICAgICBlbGVtZW50LFxyXG4gICAgICAgICAgICBlbGVtZW50V2lkdGg6ICBlbFJlY3Qud2lkdGgsXHJcbiAgICAgICAgICAgIGVsZW1lbnRIZWlnaHQ6IGVsUmVjdC5oZWlnaHQsXHJcblxyXG4gICAgICAgICAgICB0b3A6ICAgIGVsUmVjdC50b3AgLSB2cFJlY3QudG9wLFxyXG4gICAgICAgICAgICBib3R0b206IHZwUmVjdC5ib3R0b20gLSBlbFJlY3QuYm90dG9tLFxyXG4gICAgICAgICAgICBsZWZ0OiAgIGVsUmVjdC5sZWZ0IC0gdnBSZWN0LmxlZnQsXHJcbiAgICAgICAgICAgIHJpZ2h0OiAgdnBSZWN0LnJpZ2h0IC0gZWxSZWN0LnJpZ2h0LFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIEByZXR1cm4gYm9vbGVhbiAqL1xyXG4gICAgZnVuY3Rpb24gaW5WaWV3cG9ydChlbGVtZW50LCB0aHJlc2hvbGQgPSAwLCB2aWV3cG9ydCkge1xyXG4gICAgICAgIGxldCBwb3MgPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGVsZW1lbnQsIHZpZXdwb3J0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHBvcy50b3AgLSB0aHJlc2hvbGQgPj0gMCAmJiBwb3MuYm90dG9tIC0gdGhyZXNob2xkID49IDAgJiYgcG9zLmxlZnQgLSB0aHJlc2hvbGQgPj0gMCAmJiBwb3MucmlnaHQgLSB0aHJlc2hvbGQgPj0gMDtcclxuICAgIH1cclxuXHJcbiAgICAvKiogQHJldHVybiB7aW5WaWV3cG9ydCwgdmVydGljYWwsIGhvcml6b250YWwsIHRvcCwgYm90dG9tLCBsZWZ0LCByaWdodCwgd2lkdGgsIGhlaWdodCwgdmlld3BvcnRXaWR0aCwgdmlld3BvcnRIZWlnaHR9ICAqL1xyXG4gICAgZnVuY3Rpb24gZ2V0U3RhdGUoZWxlbWVudCwgdGhyZXNob2xkID0gMCwgYWxsb3dQYXJ0bHkgPSBmYWxzZSwgdmlld3BvcnQpIHtcclxuICAgICAgICBsZXQgcG9zID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlbGVtZW50LCB2aWV3cG9ydCk7XHJcblxyXG4gICAgICAgIHBvcy5pblZpZXdwb3J0ID0gcG9zLnRvcCAtIHRocmVzaG9sZCA+PSAwICYmIHBvcy5ib3R0b20gLSB0aHJlc2hvbGQgPj0gMCAmJiBwb3MubGVmdCAtIHRocmVzaG9sZCA+PSAwICYmIHBvcy5yaWdodCAtIHRocmVzaG9sZCA+PSAwO1xyXG5cclxuICAgICAgICBpZiAocG9zLnRvcCAtIHRocmVzaG9sZCA+PSAwICYmIHBvcy5ib3R0b20gLSB0aHJlc2hvbGQgPj0gMCkge1xyXG4gICAgICAgICAgICBwb3MudmVydGljYWwgPSAnaW5zaWRlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG9zLnRvcCAtIHRocmVzaG9sZCA8PSAwICYmIHBvcy5ib3R0b20gLSB0aHJlc2hvbGQgPD0gMCkge1xyXG4gICAgICAgICAgICBwb3MudmVydGljYWwgPSAnZXhjZWVkcyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFsbG93UGFydGx5KSB7XHJcbiAgICAgICAgICAgIHBvcy52ZXJ0aWNhbCA9IHBvcy50b3AgLSB0aHJlc2hvbGQgPD0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICA/IChwb3MuYm90dG9tIC0gdGhyZXNob2xkIC0gcG9zLnZpZXdwb3J0SGVpZ2h0KSA+IHBvcy5lbGVtZW50SGVpZ2h0ID8gJ2Fib3ZlJyA6ICdwYXJ0bHktYWJvdmUnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIDogKHBvcy50b3AgLSB0aHJlc2hvbGQgLSBwb3Mudmlld3BvcnRIZWlnaHQpID4gcG9zLmVsZW1lbnRIZWlnaHQgPyAnYmVsb3cnIDogJ3BhcnRseS1iZWxvdyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBwb3MudmVydGljYWwgPSBwb3MudG9wIC0gdGhyZXNob2xkIDw9IDAgPyAnYWJvdmUnIDogJ2JlbG93JztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChwb3MubGVmdCAtIHRocmVzaG9sZCA+PSAwICYmIHBvcy5yaWdodCAtIHRocmVzaG9sZCA+PSAwKSB7XHJcbiAgICAgICAgICAgIHBvcy5ob3Jpem9udGFsID0gJ2luc2lkZSc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHBvcy5sZWZ0IC0gdGhyZXNob2xkIDw9IDAgJiYgcG9zLnJpZ2h0IC0gdGhyZXNob2xkIDw9IDApIHtcclxuICAgICAgICAgICAgcG9zLmhvcml6b250YWwgPSAnZXhjZWVkcyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGFsbG93UGFydGx5KSB7XHJcbiAgICAgICAgICAgIHBvcy5ob3Jpem9udGFsID0gcG9zLmxlZnQgLSB0aHJlc2hvbGQgPD0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gKHBvcy5yaWdodCAtIHRocmVzaG9sZCAtIHBvcy52aWV3cG9ydFdpZHRoKSA+IHBvcy5lbGVtZW50V2lkdGggPyAnbGVmdCcgOiAncGFydGx5LWxlZnQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAocG9zLmxlZnQgLSB0aHJlc2hvbGQgLSBwb3Mudmlld3BvcnRXaWR0aCkgPiBwb3MuZWxlbWVudFdpZHRoID8gJ3JpZ2h0JyA6ICdwYXJ0bHktcmlnaHQnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcG9zLmhvcml6b250YWwgPSBwb3MudG9wIC0gdGhyZXNob2xkIDw9IDAgPyAnbGVmdCcgOiAncmlnaHQnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBvcztcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdmlld3BvcnRGdW5jdGlvbnMgPSB7XHJcbiAgICAgICAgLyoqIEByZXR1cm4gYm9vbGVhbiAqL1xyXG4gICAgICAgIGhhc1Njcm9sbCgpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmxlbmd0aCkgeyByZXR1cm4gZmFsc2U7IH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBoYXNTY3JvbGwodGhpc1swXSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqIEByZXR1cm4gSFRNTEVsZW1lbnQgKi9cclxuICAgICAgICBzY3JvbGxhYmxlUGFyZW50KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0U2Nyb2xsYWJsZVBhcmVudCh0aGlzWzBdKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKiogQHJldHVybiB7dG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0LCB3aWR0aCwgaGVpZ2h0LCB2aWV3cG9ydFdpZHRoLCB2aWV3cG9ydEhlaWdodH0gKi9cclxuICAgICAgICByZWxhdGl2ZVBvc2l0aW9uKHZpZXdwb3J0ID0gdGhpcy5zY3JvbGxhYmxlUGFyZW50KCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGdldFJlbGF0aXZlUG9zaXRpb24odGhpc1swXSwgdmlld3BvcnQgPyAodmlld3BvcnQgaW5zdGFuY2VvZiAkID8gdmlld3BvcnRbMF0gOiB2aWV3cG9ydCkgOiB0aGlzLnNjcm9sbGFibGVQYXJlbnQoKSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqIEByZXR1cm4gYm9vbGVhbiAqL1xyXG4gICAgICAgIGluVmlld3BvcnQodGhyZXNob2xkID0gMCwgdmlld3BvcnQpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmxlbmd0aCkgeyByZXR1cm4gZmFsc2U7IH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpblZpZXdwb3J0KHRoaXNbMF0sIHRocmVzaG9sZCwgdmlld3BvcnQgfHwgdGhpcy5zY3JvbGxhYmxlUGFyZW50KCkpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8qKiBAcmV0dXJuIHtpblZpZXdwb3J0LCB2ZXJ0aWNhbCwgaG9yaXpvbnRhbCwgdG9wLCBib3R0b20sIGxlZnQsIHJpZ2h0LCB3aWR0aCwgaGVpZ2h0LCB2aWV3cG9ydFdpZHRoLCB2aWV3cG9ydEhlaWdodH0gICovXHJcbiAgICAgICAgZ2V0U3RhdGUodGhyZXNob2xkID0gMCwgYWxsb3dQYXJ0bHkgPSBmYWxzZSwgdmlld3BvcnQpIHtcclxuICAgICAgICAgICAgdmlld3BvcnQgPSB2aWV3cG9ydCB8fCB0aGlzLnNjcm9sbGFibGVQYXJlbnQoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5sZW5ndGgpIHsgcmV0dXJuIHtpblZpZXdwb3J0OiBmYWxzZSwgdmVydGljYWw6ICdpbnNpZGUnLCBob3Jpem9udGFsOiAnaW5zaWRlJywgdG9wOiAwLCBib3R0b206IDAsIGxlZnQ6IDAsIHJpZ2h0OiAwLCB3aWR0aDogMCwgaGVpZ2h0OiAwLCB2aWV3cG9ydFdpZHRoOiAwLCB2aWV3cG9ydEhlaWdodDogMH07IH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBnZXRTdGF0ZSh0aGlzWzBdLCB0aHJlc2hvbGQsIGFsbG93UGFydGx5LCB2aWV3cG9ydCk7XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcblxyXG4gICAgJC5mbi52aWV3cG9ydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gey4uLnRoaXMsIC4uLnZpZXdwb3J0RnVuY3Rpb25zfTtcclxuICAgIH07XHJcblxyXG4gICAgJC5leHRlbmQoJC5leHByWyc6J10sIHtcclxuICAgICAgICBoYXNTY3JvbGwoZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaGFzU2Nyb2xsKGVsZW1lbnQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGFzU2Nyb2xsVmVydGljYWwoZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRIZWlnaHQgPCBlbGVtZW50LnNjcm9sbEhlaWdodDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhhc1Njcm9sbEhvcml6b250YWwoZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5vZmZzZXRXaWR0aCA8IGVsZW1lbnQuc2Nyb2xsV2lkdGg7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpblZpZXdwb3J0KGVsZW1lbnQsIGksIG1ldGEpIHtcclxuICAgICAgICAgICAgbGV0IHBhcmFtICAgICA9IChtZXRhWzNdIHx8ICcnKS5zcGxpdCgnLCcpLFxyXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkID0gKHBhcmFtWzBdICYmIChwYXJhbVswXSA9IHBhcmFtWzBdLnRyaW0oKSkpID8gcGFyc2VJbnQocGFyYW1bMF0sIDEwKSA6IDAsXHJcbiAgICAgICAgICAgICAgICB2aWV3cG9ydCAgPSAocGFyYW1bMV0gJiYgKHBhcmFtWzFdID0gcGFyYW1bMV0udHJpbSgpKSkgPyAoJChwYXJhbVsxXSlbMF0gfHwgdW5kZWZpbmVkKSA6IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBpblZpZXdwb3J0KGVsZW1lbnQsIHRocmVzaG9sZCwgdmlld3BvcnQgfHwgZ2V0U2Nyb2xsYWJsZVBhcmVudChlbGVtZW50KSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBhYm92ZVRoZVZpZXdwb3J0KGVsZW1lbnQsIGksIG1ldGEpIHtcclxuICAgICAgICAgICAgbGV0IHBhcmFtICAgICA9IChtZXRhWzNdIHx8ICcnKS5zcGxpdCgnLCcpLFxyXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkID0gKHBhcmFtWzBdICYmIChwYXJhbVswXSA9IHBhcmFtWzBdLnRyaW0oKSkpID8gcGFyc2VJbnQocGFyYW1bMF0sIDEwKSA6IDAsXHJcbiAgICAgICAgICAgICAgICB2aWV3cG9ydCAgPSAocGFyYW1bMV0gJiYgKHBhcmFtWzFdID0gcGFyYW1bMV0udHJpbSgpKSkgPyAoJChwYXJhbVsxXSlbMF0gfHwgdW5kZWZpbmVkKSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIHBvcyAgICAgICA9IGdldFJlbGF0aXZlUG9zaXRpb24oZWxlbWVudCwgdmlld3BvcnQgfHwgZ2V0U2Nyb2xsYWJsZVBhcmVudChlbGVtZW50KSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcG9zLnRvcCAtIHRocmVzaG9sZCA8PSAwICYmIHBvcy5ib3R0b20gPj0gMDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGJlbG93VGhlVmlld3BvcnQoZWxlbWVudCwgaSwgbWV0YSkge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW0gICAgID0gKG1ldGFbM10gfHwgJycpLnNwbGl0KCcsJyksXHJcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQgPSAocGFyYW1bMF0gJiYgKHBhcmFtWzBdID0gcGFyYW1bMF0udHJpbSgpKSkgPyBwYXJzZUludChwYXJhbVswXSwgMTApIDogMCxcclxuICAgICAgICAgICAgICAgIHZpZXdwb3J0ICA9IChwYXJhbVsxXSAmJiAocGFyYW1bMV0gPSBwYXJhbVsxXS50cmltKCkpKSA/ICgkKHBhcmFtWzFdKVswXSB8fCB1bmRlZmluZWQpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgcG9zICAgICAgID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlbGVtZW50LCB2aWV3cG9ydCB8fCBnZXRTY3JvbGxhYmxlUGFyZW50KGVsZW1lbnQpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwb3MuYm90dG9tIC0gdGhyZXNob2xkIDw9IDAgJiYgcG9zLnRvcCA+PSAwO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbGVmdE9mVmlld3BvcnQoZWxlbWVudCwgaSwgbWV0YSkge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW0gICAgID0gKG1ldGFbM10gfHwgJycpLnNwbGl0KCcsJyksXHJcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQgPSAocGFyYW1bMF0gJiYgKHBhcmFtWzBdID0gcGFyYW1bMF0udHJpbSgpKSkgPyBwYXJzZUludChwYXJhbVswXSwgMTApIDogMCxcclxuICAgICAgICAgICAgICAgIHZpZXdwb3J0ICA9IChwYXJhbVsxXSAmJiAocGFyYW1bMV0gPSBwYXJhbVsxXS50cmltKCkpKSA/ICgkKHBhcmFtWzFdKVswXSB8fCB1bmRlZmluZWQpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgcG9zICAgICAgID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlbGVtZW50LCB2aWV3cG9ydCB8fCBnZXRTY3JvbGxhYmxlUGFyZW50KGVsZW1lbnQpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwb3MubGVmdCAtIHRocmVzaG9sZCA8PSAwICYmIHBvcy5yaWdodCA+PSAwO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmlnaHRPZlZpZXdwb3J0KGVsZW1lbnQsIGksIG1ldGEpIHtcclxuICAgICAgICAgICAgbGV0IHBhcmFtICAgICA9IChtZXRhWzNdIHx8ICcnKS5zcGxpdCgnLCcpLFxyXG4gICAgICAgICAgICAgICAgdGhyZXNob2xkID0gKHBhcmFtWzBdICYmIChwYXJhbVswXSA9IHBhcmFtWzBdLnRyaW0oKSkpID8gcGFyc2VJbnQocGFyYW1bMF0sIDEwKSA6IDAsXHJcbiAgICAgICAgICAgICAgICB2aWV3cG9ydCAgPSAocGFyYW1bMV0gJiYgKHBhcmFtWzFdID0gcGFyYW1bMV0udHJpbSgpKSkgPyAoJChwYXJhbVsxXSlbMF0gfHwgdW5kZWZpbmVkKSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgICAgIHBvcyAgICAgICA9IGdldFJlbGF0aXZlUG9zaXRpb24oZWxlbWVudCwgdmlld3BvcnQgfHwgZ2V0U2Nyb2xsYWJsZVBhcmVudChlbGVtZW50KSk7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcG9zLnJpZ2h0IC0gdGhyZXNob2xkIDw9IDAgJiYgcG9zLmxlZnQgPj0gMDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGFib3ZlVGhlVmlld3BvcnRQYXJ0bHkoZWxlbWVudCwgaSwgbWV0YSkge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW0gICAgID0gKG1ldGFbM10gfHwgJycpLnNwbGl0KCcsJyksXHJcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQgPSAocGFyYW1bMF0gJiYgKHBhcmFtWzBdID0gcGFyYW1bMF0udHJpbSgpKSkgPyBwYXJzZUludChwYXJhbVswXSwgMTApIDogMCxcclxuICAgICAgICAgICAgICAgIHZpZXdwb3J0ICA9IChwYXJhbVsxXSAmJiAocGFyYW1bMV0gPSBwYXJhbVsxXS50cmltKCkpKSA/ICgkKHBhcmFtWzFdKVswXSB8fCB1bmRlZmluZWQpIDogdW5kZWZpbmVkLFxyXG4gICAgICAgICAgICAgICAgcG9zICAgICAgID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlbGVtZW50LCB2aWV3cG9ydCB8fCBnZXRTY3JvbGxhYmxlUGFyZW50KGVsZW1lbnQpKTtcclxuXHJcbiAgICAgICAgICAgIHJldHVybiBwb3MudG9wIC0gdGhyZXNob2xkIDw9IDAgJiYgcG9zLmJvdHRvbSA+PSAwICYmIChwb3MuYm90dG9tIC0gdGhyZXNob2xkIC0gcG9zLnZpZXdwb3J0SGVpZ2h0KSA+IHBvcy5lbGVtZW50SGVpZ2h0O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYmVsb3dUaGVWaWV3cG9ydFBhcnRseShlbGVtZW50LCBpLCBtZXRhKSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJhbSAgICAgPSAobWV0YVszXSB8fCAnJykuc3BsaXQoJywnKSxcclxuICAgICAgICAgICAgICAgIHRocmVzaG9sZCA9IChwYXJhbVswXSAmJiAocGFyYW1bMF0gPSBwYXJhbVswXS50cmltKCkpKSA/IHBhcnNlSW50KHBhcmFtWzBdLCAxMCkgOiAwLFxyXG4gICAgICAgICAgICAgICAgdmlld3BvcnQgID0gKHBhcmFtWzFdICYmIChwYXJhbVsxXSA9IHBhcmFtWzFdLnRyaW0oKSkpID8gKCQocGFyYW1bMV0pWzBdIHx8IHVuZGVmaW5lZCkgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBwb3MgICAgICAgPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGVsZW1lbnQsIHZpZXdwb3J0IHx8IGdldFNjcm9sbGFibGVQYXJlbnQoZWxlbWVudCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHBvcy5ib3R0b20gLSB0aHJlc2hvbGQgPD0gMCAmJiBwb3MudG9wID49IDAgJiYgKHBvcy50b3AgLSB0aHJlc2hvbGQgLSBwb3Mudmlld3BvcnRIZWlnaHQpID4gcG9zLmVsZW1lbnRIZWlnaHQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsZWZ0T2ZWaWV3cG9ydFBhcnRseShlbGVtZW50LCBpLCBtZXRhKSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJhbSAgICAgPSAobWV0YVszXSB8fCAnJykuc3BsaXQoJywnKSxcclxuICAgICAgICAgICAgICAgIHRocmVzaG9sZCA9IChwYXJhbVswXSAmJiAocGFyYW1bMF0gPSBwYXJhbVswXS50cmltKCkpKSA/IHBhcnNlSW50KHBhcmFtWzBdLCAxMCkgOiAwLFxyXG4gICAgICAgICAgICAgICAgdmlld3BvcnQgID0gKHBhcmFtWzFdICYmIChwYXJhbVsxXSA9IHBhcmFtWzFdLnRyaW0oKSkpID8gKCQocGFyYW1bMV0pWzBdIHx8IHVuZGVmaW5lZCkgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBwb3MgICAgICAgPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGVsZW1lbnQsIHZpZXdwb3J0IHx8IGdldFNjcm9sbGFibGVQYXJlbnQoZWxlbWVudCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHBvcy5sZWZ0IC0gdGhyZXNob2xkIDw9IDAgJiYgcG9zLnJpZ2h0ID49IDAgJiYgKHBvcy5sZWZ0IC0gdGhyZXNob2xkIC0gcG9zLnZpZXdwb3J0V2lkdGgpID4gcG9zLmVsZW1lbnRXaWR0aDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJpZ2h0T2ZWaWV3cG9ydFBhcnRseShlbGVtZW50LCBpLCBtZXRhKSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJhbSAgICAgPSAobWV0YVszXSB8fCAnJykuc3BsaXQoJywnKSxcclxuICAgICAgICAgICAgICAgIHRocmVzaG9sZCA9IChwYXJhbVswXSAmJiAocGFyYW1bMF0gPSBwYXJhbVswXS50cmltKCkpKSA/IHBhcnNlSW50KHBhcmFtWzBdLCAxMCkgOiAwLFxyXG4gICAgICAgICAgICAgICAgdmlld3BvcnQgID0gKHBhcmFtWzFdICYmIChwYXJhbVsxXSA9IHBhcmFtWzFdLnRyaW0oKSkpID8gKCQocGFyYW1bMV0pWzBdIHx8IHVuZGVmaW5lZCkgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBwb3MgICAgICAgPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGVsZW1lbnQsIHZpZXdwb3J0IHx8IGdldFNjcm9sbGFibGVQYXJlbnQoZWxlbWVudCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHBvcy5yaWdodCAtIHRocmVzaG9sZCA8PSAwICYmIHBvcy5sZWZ0ID49IDAgJiYgKHBvcy5yaWdodCAtIHRocmVzaG9sZCAtIHBvcy52aWV3cG9ydFdpZHRoKSA+IHBvcy5lbGVtZW50V2lkdGg7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleGNlZWRzVmlld3BvcnQoZWxlbWVudCwgaSwgbWV0YSkge1xyXG4gICAgICAgICAgICBsZXQgcGFyYW0gICAgID0gKG1ldGFbM10gfHwgJycpLnNwbGl0KCcsJyksXHJcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQgPSAocGFyYW1bMF0gJiYgKHBhcmFtWzBdID0gcGFyYW1bMF0udHJpbSgpKSkgPyBwYXJzZUludChwYXJhbVswXSwgMTApIDogMCxcclxuICAgICAgICAgICAgICAgIHZpZXdwb3J0ICA9IChwYXJhbVsxXSAmJiAocGFyYW1bMV0gPSBwYXJhbVsxXS50cmltKCkpKSA/ICgkKHBhcmFtWzFdKVswXSB8fCB1bmRlZmluZWQpIDogdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICFpblZpZXdwb3J0KGVsZW1lbnQsIHRocmVzaG9sZCwgdmlld3BvcnQgfHwgZ2V0U2Nyb2xsYWJsZVBhcmVudChlbGVtZW50KSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBleGNlZWRzVmlld3BvcnRWZXJ0aWNhbChlbGVtZW50LCBpLCBtZXRhKSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJhbSAgICAgPSAobWV0YVszXSB8fCAnJykuc3BsaXQoJywnKSxcclxuICAgICAgICAgICAgICAgIHRocmVzaG9sZCA9IChwYXJhbVswXSAmJiAocGFyYW1bMF0gPSBwYXJhbVswXS50cmltKCkpKSA/IHBhcnNlSW50KHBhcmFtWzBdLCAxMCkgOiAwLFxyXG4gICAgICAgICAgICAgICAgdmlld3BvcnQgID0gKHBhcmFtWzFdICYmIChwYXJhbVsxXSA9IHBhcmFtWzFdLnRyaW0oKSkpID8gKCQocGFyYW1bMV0pWzBdIHx8IHVuZGVmaW5lZCkgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBwb3MgICAgICAgPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGVsZW1lbnQsIHZpZXdwb3J0IHx8IGdldFNjcm9sbGFibGVQYXJlbnQoZWxlbWVudCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHBvcy50b3AgLSB0aHJlc2hvbGQgPCAwICYmIHBvcy5ib3R0b20gLSB0aHJlc2hvbGQgPCAwO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZXhjZWVkc1ZpZXdwb3J0SG9yaXpvbnRhbChlbGVtZW50LCBpLCBtZXRhKSB7XHJcbiAgICAgICAgICAgIGxldCBwYXJhbSAgICAgPSAobWV0YVszXSB8fCAnJykuc3BsaXQoJywnKSxcclxuICAgICAgICAgICAgICAgIHRocmVzaG9sZCA9IChwYXJhbVswXSAmJiAocGFyYW1bMF0gPSBwYXJhbVswXS50cmltKCkpKSA/IHBhcnNlSW50KHBhcmFtWzBdLCAxMCkgOiAwLFxyXG4gICAgICAgICAgICAgICAgdmlld3BvcnQgID0gKHBhcmFtWzFdICYmIChwYXJhbVsxXSA9IHBhcmFtWzFdLnRyaW0oKSkpID8gKCQocGFyYW1bMV0pWzBdIHx8IHVuZGVmaW5lZCkgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICBwb3MgICAgICAgPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGVsZW1lbnQsIHZpZXdwb3J0IHx8IGdldFNjcm9sbGFibGVQYXJlbnQoZWxlbWVudCkpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHBvcy5sZWZ0IC0gdGhyZXNob2xkIDwgMCAmJiBwb3MucmlnaHQgLSB0aHJlc2hvbGQgPCAwO1xyXG4gICAgICAgIH0sXHJcbiAgICB9KTtcclxufSkoalF1ZXJ5KTsiXSwiZmlsZSI6InZpZXdwb3J0LmpxdWVyeS5qcyJ9
